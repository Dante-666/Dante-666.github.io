@startuml
skinparam backgroundcolor transparent

class Entity {
    virtual void onSimulation(SimTime deltaTime)
}

Entity <|-- MarkerEntity 

Entity <|-- VisibleEntity

class GhostEntity {
    virtual void onSimulation(SimTime deltaTime)
    ..
    Implement trigger logic here and if object is
    dynamic, we can update state as well
}

class PhysicsEntity {
    virtual void onSimulation(SimTime deltaTime)
    ..
    Update the position/rotation of object here
    Also, if Scene is in edit mode, we can disable
    the physics counterpart here.
}

MarkerEntity <|-- GhostEntity
VisibleEntity <|-- PhysicsEntity

class Scene {
    Array<shared_ptr<Entity>> m_entityArray
    virtual onSimulation(SimTime deltaTime)
    ..
    for (entity : m_entityArray)
        entity->onSimulation(m_time, deltaTime)
}

class PhysicsScene {
    PurePhysics* m_physics
    virtual onSimulation(SimTime deltaTime)
    ..
    m_physics->simulate(deltaTime)
    Scene::onSimulation(deltaTime)
}
class PurePhysics {
    {abstract} insertEntity(const G3D::Entity *entity)
    {abstract} removeEntity(const G3D::Entity *entity)
    {abstract} G3D::CoordinateFrame getFrame(const G3D::Entity *entity)
    {abstract} simulate(float deltaTime)
}
class BulletPhysics {
    btDynamicsWorld *m_dynamicsWorld;
    insertEntity(const G3D::Entity *entity)
    removeEntity(const G3D::Entity *entity)
    G3D::CoordinateFrame getFrame(const G3D::Entity *entity)
    simulate(float deltaTime)
}

Scene <|-- PhysicsScene
PurePhysics <|-- BulletPhysics
@enduml
