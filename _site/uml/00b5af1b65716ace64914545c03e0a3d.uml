@startuml

abstract class Expression {
+{abstract} accept(Visitor& visitor)
}
class Value {
-int value
+accept(Visitor& visitor)
visitor.visit(*this)
}
class Addition {
-Expression& lhs
-Expression& lhs
+accept(Visitor& visitor)
}
class Multiplication {
-Expression& lhs
-Expression& lhs
+accept(Visitor& visitor)
}
Expression <|-- Value
Expression <|-- Addition
Expression <|-- Multiplication

abstract class Visitor {
+ {abstract} visit(Value& expr)
+ {abstract} visit(Addition& add)
+ {abstract} visit(Multiplication& mult)
}

class Printer {
-stringstream oss
--
+ visit(Value& expr)
\toss << de.value
+ visit(Addition& add)
\tprint(ae.left)
\toss << "+"
\tprint(ae.right)
+ visit(Multiplication& mult)
\tprint(ae.left)
\toss << "*"
\tprint(ae.right)
}

class Evaluator {
-int total
+ visit(Value& expr)
+ visit(Addition& add)
+ visit(Multiplication& mult)
}

Visitor <|-- Printer
Visitor <|-- Evaluator

Visitor <|.. Expression

Multiplication <|.. Visitor
Addition <|.. Visitor
Value <|.. Visitor
	
@enduml