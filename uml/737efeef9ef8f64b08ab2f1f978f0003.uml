@startuml

class GhostEntity {
    virtual onSimulation(SimTime deltaTime)
}

class SpawnerEntity {
    -float m_time = 0
    -float m_timer = 0
    -bool m_spawn = false
    -int id
    -Any prototype
    -vector<shared_ptr<Entity>> m_spawnedEntities
    --
    SpawnerEntity()
    virtual onSimulation(SimTime absoluteTime, SimTime deltaTime)
    ..
    if (m_timer > m_time) 
\tshared_ptr<Entity> entity = PhysicsEntity::create(prototype)
\tm_spawnedEntities.push_back(entity)
\tm_scene->insert(entity)
\tm_timer = 0
}

class AttractorEntity {
    shared_ptr<PhysicsEntity> m_invisAnchor
    vector<Constraint*> m_constraints
    --
    virtual onSimulation(SimTime deltaTime)
    ..
    auto pEngine = GhostEntity::m_physicsScene->getPhysicsEngine()
    if (auto physEntity = pEngine->getPrimaryCollider(this))
\tpEngine->ignoreCollisionCheck(this, physEntity)
\tm_constraints.push_back(
\t\tpEngine->addConstraint(m_invisAnchor.get(), physEntity))
}

GhostEntity <|-- SpawnerEntity 
GhostEntity <|-- AttractorEntity 

class BulletPhysics {
    virtual G3D::Constraint addConstraint(const G3D::Entity *entityA,
\t\tconst G3D::Entity *entityB)
    virtual removeConstraint(const G3D::Constraint *constraint)
    virtual const G3D::Entity* getPrimaryCollider(const G3D::Entity *field)
    virtual ignoreCollisionCheck(const G3D::Entity *trigger,
\t\tconst G3D::Entity *collider)
}
      
@enduml