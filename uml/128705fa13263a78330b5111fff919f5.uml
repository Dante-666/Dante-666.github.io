@startuml

class CollisionFactory {
    {static} EO *create(const GO *)
}

class CollisionShapeFactory {
    {static} btCollisionShape *create(const G3D::AShape *)
}

class PhysicsBodyFactory {
    {static} btRigidBody *create(const G3D::PhysicsEntity *)
}

class GhostObjectFactory {
    {static} btGhostObject *create(const G3D::GhostEntity *)
}

class DataFactory {
    {static} const inline ED convert(const GD)
    {static} const inline GD convert(const ED&)
}

class Frame {
    {static} const btTransform convert(const G3D::CoordinateFrame&)
    {static} const G3D::CoordinateFrame convert(const btTransform&)
}

class Matrix  {
    {static} const btMatrix3x3 convert(const G3D::Matrix3&)
    {static} const G3D::Matrix3 convert(const btMatrix3x3&)
}

class Vector {
    {static} const btVector3 convert(const G3D::Vector3&)
    {static} const G3D::Vector3 convert(const btVector3&)
}

CollisionFactory <|-- CollisionShapeFactory
CollisionFactory <|-- PhysicsBodyFactory
CollisionFactory <|-- GhostObjectFactory

DataFactory <|-- Frame
DataFactory <|-- Matrix
DataFactory <|-- Vector

Matrix -down[hidden]- CollisionFactory

      
@enduml